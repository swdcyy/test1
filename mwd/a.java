package mwd.a;
import java.lang.String;
import java.io.ByteArrayOutputStream;
import mwd.a$a;
import java.io.OutputStream;
import java.util.zip.GZIPOutputStream;
import java.lang.Object;
import java.lang.System;
import java.lang.IllegalArgumentException;
import java.lang.Integer;
import java.lang.StringBuilder;

public class a	// class@001d5e
{
    public static final byte[] a;
    public static final byte[] b;
    public static final byte[] c;
    public static final byte[] d;
    public static final byte[] e;
    public static final byte[] f;
    public static final boolean g;

    static {
       a.a = new byte[64]{'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','0','1','2','3','4','5','6','7','8','9','+','/'};
       a.b = new byte[256]{0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xfb,0xfb,0xf7,0xf7,0xfb,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xfb,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,'>',0xf7,0xf7,0xf7,'?','4','5','6','7','8','9',':',';','<','=',0xf7,0xf7,0xf7,0xff,0xf7,0xf7,0xf7,0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f,0x20,'!','"','#','$','%','&',0x27,'(',')','*','+',',','-','.','/','0','1','2','3',0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7};
       a.c = new byte[64]{'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','0','1','2','3','4','5','6','7','8','9','-','_'};
       a.d = new byte[256]{0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xfb,0xfb,0xf7,0xf7,0xfb,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xfb,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,'>',0xf7,0xf7,'4','5','6','7','8','9',':',';','<','=',0xf7,0xf7,0xf7,0xff,0xf7,0xf7,0xf7,0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0xf7,0xf7,0xf7,0xf7,'?',0xf7,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f,0x20,'!','"','#','$','%','&',0x27,'(',')','*','+',',','-','.','/','0','1','2','3',0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7};
       a.e = new byte[64]{'-','0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','_','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'};
       a.f = new byte[257]{0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xfb,0xfb,0xf7,0xf7,0xfb,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xfb,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0x00,0xf7,0xf7,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0xf7,0xf7,0xf7,0xff,0xf7,0xf7,0xf7,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f,0x20,'!','"','#','$',0xf7,0xf7,0xf7,0xf7,'%',0xf7,'&',0x27,'(',')','*','+',',','-','.','/','0','1','2','3','4','5','6','7','8','9',':',';','<','=','>','?',0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7};
    }
    public static byte[] a(byte[] p0,int p1,int p2,byte[] p3,int p4,int p5){
       byte[] c;
       int i;
       if ((p5 & 0x10) == 16) {
          c = a.c;
       }else {
          i = 32;
          c = ((p5 & i) == i)? a.e: a.a;
       }
       i = 0;
       int i1 = (p2 > 0)? (p0[p1] << 24) >> 8: 0;
       int i2 = (p2 > 1)? (p0[(p1 + 1)] << 24) >> 16: 0;
       i2 = i2 | i1;
       if (p2 > 2) {
          i = (p0[(p1 + 2)] << 24) >> 24;
       }
       int i3 = i2 | i;
       p1 = 61;
       if (p2 != 1) {
          if (p2 != 2) {
             if (p2 != 3) {
                return p3;
             }else {
                p3[p4] = c[(i3 >> 18)];
                p3[(p4 + 1)] = c[((i3 >> 12) & 0x3f)];
                p3[(p4 + 2)] = c[((i3 >> 6) & 0x3f)];
                p3[(p4 + 3)] = c[(i3 & 0x3f)];
                return p3;
             }
          }else {
             p3[p4] = c[(i3 >> 18)];
             p3[(p4 + 1)] = c[((i3 >> 12) & 0x3f)];
             p3[(p4 + 2)] = c[((i3 >> 6) & 0x3f)];
             p3[(p4 + 3)] = p1;
             return p3;
          }
       }else {
          p3[p4] = c[(i3 >> 18)];
          p3[(p4 + 1)] = c[((i3 >> 12) & 0x3f)];
          p3[(p4 + 2)] = p1;
          p3[(p4 + 3)] = p1;
          return p3;
       }
    }
    public static byte[] b(byte[] p0,byte[] p1,int p2,int p3){
       a.a(p1, 0, p2, p0, 0, p3);
       return p0;
    }
    public static String c(byte[] p0){
       String str;
       try{
          str = a.d(p0, 0, p0.length, 0);
       }catch(java.io.IOException e0){
          str = null;
       }
       return str;
    }
    public static String d(byte[] p0,int p1,int p2,int p3){
       int i2;
       ByteArrayOutputStream uByteArrayOu;
       int i4;
       GZIPOutputStream gZIPOutputSt;
       int i5;
       int i12;
       byte[] uobyteArray = p0;
       int i = p1;
       int i1 = p2;
       if (i < 0) {
          throw new IllegalArgumentException("Cannot have negative offset: "+i);
       }
       if (i1 < 0) {
          throw new IllegalArgumentException("Cannot have length offset: "+i1);
       }
       if ((i + i1) <= uobyteArray.length) {
          if (p3 & 0x02) {
             String str = null;
             try{
                try{
                   uByteArrayOu = new ByteArrayOutputStream();
                   int i3 = p3 | 0x01;
                   try{
                      a$a uoa = new a$a(uByteArrayOu, i3);
                      try{
                         gZIPOutputSt = new GZIPOutputStream(uoa);
                         gZIPOutputSt.write(uobyteArray, i, i1);
                         try{
                            gZIPOutputSt.close();
                            gZIPOutputSt.close();
                            try{
                               uoa.close();
                               try{
                                  uByteArrayOu.close();
                                  uobyteArray = uByteArrayOu.toByteArray();
                               }catch(java.lang.Exception e0){
                               }
                            }catch(java.lang.Exception e0){
                            }
                         }catch(java.lang.Exception e0){
                         }
                      }catch(java.io.IOException e0){
                         i4 = gZIPOutputSt;
                      }
                      i4 = uoa;
                   }catch(java.io.IOException e0){
                      goto label_0049 ;
                   }
                }catch(java.io.IOException e0){
                   i2 = str;
                }
                i4 = uByteArrayOu;
             }catch(java.io.IOException e0){
                i2 = str;
             }
             throw e0;
          }else if(p3 & 0x08){
             i5 = 1;
          }else {
             i5 = 0;
          }
          i4 = (i1 / 3) * 4;
          int i6 = ((i1 % 3) > 0)? 4: 0;
          i4 = i4 + i6;
          if (i5) {
             i4 = i4 + (i4 / 76);
          }
          int i7 = i4;
          byte[] uobyteArray1 = new byte[i7];
          int i8 = i1 - 2;
          int i9 = 0;
          int i10 = 0;
          int i11 = 0;
          while (i9 < i8) {
             i6 = i9 + i;
             i12 = i9;
             a.a(p0, i6, 3, uobyteArray1, i10, p3);
             i4 = i11 + 4;
             if (i5 && i4 >= 76) {
                i4 = i10 + 4;
                uobyteArray1[i4] = 10;
                i10 = i10 + 1;
                i11 = 0;
             }else {
                i11 = i4;
             }
             i9 = i12 + 3;
             i10 = i10 + 4;
          }
          i12 = i9;
          if (i12 < i1) {
             a.a(p0, (i12 + i), (i1 - i12), uobyteArray1, i10, p3);
             i10 = i10 + 4;
          }
          int i13 = i10;
          if (i13 <= (i7 - 1)) {
             byte[] uobyteArray2 = new byte[i13];
             System.arraycopy(uobyteArray1, 0, uobyteArray2, 0, i13);
             uobyteArray = uobyteArray2;
          }else {
             uobyteArray = uobyteArray1;
          }
       }else {
          Object[] objArray = new Object[]{Integer.valueOf(p1),Integer.valueOf(p2),Integer.valueOf(uobyteArray.length)};
          throw new IllegalArgumentException(String.format("Cannot have offset of %d and length of %d with array of length %d", objArray));
       }
    }
    public static final byte[] e(int p0){
       if ((p0 & 0x10) == 16) {
          return a.d;
       }
       if ((p0 & 32) == 32) {
          return a.f;
       }
       return a.b;
    }
}
