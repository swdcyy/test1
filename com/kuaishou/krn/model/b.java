package com.kuaishou.krn.model.b;
import com.kuaishou.krn.log.model.KrnLogCommonParams;
import lj0.c;
import java.lang.String;
import com.kuaishou.krn.model.LoadingStateTrack$LoadType;
import com.kuaishou.krn.experiment.ExpConfigKt;

public class b extends KrnLogCommonParams	// class@00090a
{
    public String asset_bundle_load_mode;
    public long asset_check_end;
    public long asset_check_start;
    public long asset_get_base_js_end;
    public long asset_get_base_js_start;
    public long asset_get_end;
    public long asset_get_info_end;
    public long asset_get_info_start;
    public long asset_get_start;
    public long asset_init_end;
    public long asset_init_start;
    public long asset_load_from_local_end;
    public long asset_load_from_local_start;
    public long asset_load_from_memory_end;
    public long asset_load_from_memory_start;
    public long asset_load_from_not_local_end;
    public long asset_load_from_not_local_start;
    public long asset_resolve_end;
    public long asset_resolve_start;
    public long base_js_bundle_size;
    public long business_js_bundle_size;
    public long container_init_end;
    public long container_init_start;
    public long content_appeared;
    public long create_js_context_end;
    public long create_js_context_start;
    public long engine_init_end;
    public long engine_init_start;
    public long engine_prepare_start;
    public long fmp;
    public Map get_constant_time;
    public Map js_data_end;
    public Map js_data_start;
    public long krn_bridge_init_time;
    public long krn_sdk_entry_time;
    public long lcp;
    public long load_base_js_bundle_end;
    public long load_base_js_bundle_start;
    public long load_business_js_bundle_end;
    public long load_business_js_bundle_start;
    public long load_react_native_so_file_end;
    public long load_react_native_so_file_start;
    public long mBaseBundleCodeCacheStartToEnd;
    public long mBridgeInitToLoadJsBundleTime;
    public long mBridgeInitToRunJsBundleTime;
    public long mBundleCodeCacheStartToEnd;
    public int mCurrentCoreInstanceUsedCount;
    public boolean mHasRunJSBundle;
    public long mIntervalBetweenViews;
    public boolean mIsBaseBundleCodeCacheHit;
    public boolean mIsBundleCodeCacheHit;
    public long mIsColdLaunch;
    public long mIsOnAppLaunchFinishPreload;
    public long mJsBundleEndToAppearedTime;
    public long mJsBundleStartToEndTime;
    public long mKrnLaunchOptimation;
    public String mLastBundleId;
    public String mLastComponentName;
    public long mLoadJSBundleStartToEndTime;
    public long mLoadLibarysStartToEndTime;
    public long mLoadScriptEndToRunJsBundleStartTime;
    public long mLoadScriptStartToEndTime;
    public LoadingStateTrack$LoadType mLoadType;
    public long mPluginStart2EndTime;
    public long mPrepareJSRunTimeStartToEndTime;
    public long mSdkToBridgeInitTime;
    public long mShellContainerStart2ReadyTime;
    public int module_init_by_main_thread_count;
    public long module_init_by_main_thread_end;
    public long module_init_by_main_thread_start;
    public int module_register_count;
    public long module_register_end;
    public long module_register_start;
    public int module_wait_main_thread_time;
    public Map native_data_end;
    public Map native_data_resolve_end;
    public Map native_data_resolve_start;
    public Map native_data_size;
    public Map native_data_start;
    public long native_do_pre_start;
    public long native_module_end;
    public long native_module_start;
    public Map native_pre_data_end;
    public Map native_pre_data_start;
    public long native_t1;
    public long plugin_download_end;
    public long plugin_download_start;
    public long plugin_install_end;
    public long plugin_install_start;
    public long plugin_load_end;
    public long plugin_load_start;
    public String report_type;
    public long run_application_end;
    public long run_application_start;
    public long run_base_js_bundle_end;
    public long run_base_js_bundle_start;
    public long run_business_js_bundle_end;
    public long run_business_js_bundle_start;
    public long t1;
    public long t2;
    public long t3;
    public int uimanager_batchdidcomplete_count;
    public int uimanager_createview_count;
    public int uimanager_managechildren_count;
    public int uimanager_setchildren_count;
    public int uimanager_updateview_count;
    public long v8_so_load_end;
    public long v8_so_load_start;

    public void b(c p0,String p1,LoadingStateTrack$LoadType p2,long p3,long p4,long p5,long p6,long p7,long p8,long p9,long p10,long p11,long p12,long p13,long p14,boolean p15,long p16,long p17,long p18,long p19,long p20,long p21,int p22,long p23,long p24,long p25,long p26,boolean p27,boolean p28,long p29,String p30,String p31){
       long l1;
       int i = this;
       LoadingStateTrack$LoadType loadType = p2;
       super(p0, null);
       i.mCurrentCoreInstanceUsedCount = 0;
       long l = 0;
       i.mIntervalBetweenViews = l;
       i.mLoadType = loadType;
       i.mPluginStart2EndTime = p20 - p19;
       i.mShellContainerStart2ReadyTime = p20 - p21;
       i.mSdkToBridgeInitTime = p4 - p3;
       i.mBridgeInitToRunJsBundleTime = p11 - p4;
       i.mLoadLibarysStartToEndTime = p18 - p17;
       if (loadType == LoadingStateTrack$LoadType.NORMAL_BUSINESS_BUNDLE) {
          i.mBridgeInitToLoadJsBundleTime = p5 - p4;
          i.mLoadJSBundleStartToEndTime = p6 - p5;
          i.mPrepareJSRunTimeStartToEndTime = p8 - p7;
          i.mLoadScriptStartToEndTime = p10 - p9;
          l1 = p11 - p10;
          i.mLoadScriptEndToRunJsBundleStartTime = l1;
          if (l1 - l < 0) {
             l1 = l;
          }
          i.mLoadScriptEndToRunJsBundleStartTime = l1;
       }
       i.mJsBundleStartToEndTime = p12 - p11;
       l1 = (!p13 - l)? l: p13 - p12;
       i.mJsBundleEndToAppearedTime = l1;
       if (ExpConfigKt.k()) {
          l = 1;
       }
       i.mKrnLaunchOptimation = l;
       i.mIsColdLaunch = p14;
       i.mHasRunJSBundle = p15;
       i.mIsOnAppLaunchFinishPreload = p16;
       i.mCurrentCoreInstanceUsedCount = p22;
       i.mIntervalBetweenViews = p29;
       i.mLastBundleId = p30;
       i.mLastComponentName = p31;
       i.mBaseBundleCodeCacheStartToEnd = p24 - p23;
       i.mBundleCodeCacheStartToEnd = p26 - p25;
       i.mIsBaseBundleCodeCacheHit = p27;
       i.mIsBundleCodeCacheHit = p28;
       return;
    }
}
