package com.frog.engine.utils.EntityArrays;
import java.util.HashMap;
import java.lang.Object;
import java.util.Map;
import java.util.Collections;
import java.lang.Class;
import java.lang.String;
import com.kwai.robust.PatchProxy;
import com.kwai.robust.PatchProxyResult;
import java.util.Set;
import java.util.Iterator;
import java.util.Map$Entry;

public class EntityArrays	// class@001570
{
    public static final Map APOS_ESCAPE;
    public static final Map APOS_UNESCAPE;
    public static final Map BASIC_ESCAPE;
    public static final Map BASIC_UNESCAPE;
    public static final Map HTML40_EXTENDED_ESCAPE;
    public static final Map HTML40_EXTENDED_UNESCAPE;
    public static final Map ISO8859_1_ESCAPE;
    public static final Map ISO8859_1_UNESCAPE;
    public static final Map JAVA_CTRL_CHARS_ESCAPE;
    public static final Map JAVA_CTRL_CHARS_UNESCAPE;

    static {
       HashMap hashMap = new HashMap();
       hashMap.put("\xa0\x00", "&nbsp;");
       hashMap.put("\xa1\x00", "&iexcl;");
       hashMap.put("¡é", "&cent;");
       hashMap.put("¡ê", "&pound;");
       hashMap.put("¡è", "&curren;");
       hashMap.put("£¤", "&yen;");
       hashMap.put("|", "&brvbar;");
       hashMap.put("¡ì", "&sect;");
       hashMap.put("¡§", "&uml;");
       hashMap.put("\xa9\x00", "&copy;");
       hashMap.put("a", "&ordf;");
       hashMap.put("\xab\x00", "&laquo;");
       hashMap.put("\xac\x00", "&not;");
       hashMap.put("-", "&shy;");
       hashMap.put("\xae\x00", "&reg;");
       hashMap.put("¡¥", "&macr;");
       hashMap.put("¡ã", "&deg;");
       hashMap.put("¡À", "&plusmn;");
       hashMap.put("2", "&sup2;");
       hashMap.put("3", "&sup3;");
       hashMap.put("¡ä", "&acute;");
       hashMap.put("¦Ì", "&micro;");
       hashMap.put("\xb6\x00", "&para;");
       hashMap.put("¡¤", "&middot;");
       hashMap.put("\xb8\x00", "&cedil;");
       hashMap.put("1", "&sup1;");
       hashMap.put("o", "&ordm;");
       hashMap.put("\xbb\x00", "&raquo;");
       hashMap.put("\xbc\x00", "&frac14;");
       hashMap.put("\xbd\x00", "&frac12;");
       hashMap.put("\xbe\x00", "&frac34;");
       hashMap.put("\xbf\x00", "&iquest;");
       hashMap.put("¨¤", "&Agrave;");
       hashMap.put("¨¢", "&Aacute;");
       hashMap.put("\xc2\x00", "&Acirc;");
       hashMap.put("\xc3\x00", "&Atilde;");
       hashMap.put("\xc4\x00", "&Auml;");
       hashMap.put("\xc5\x00", "&Aring;");
       hashMap.put("\xc6\x00", "&AElig;");
       hashMap.put("\xc7\x00", "&Ccedil;");
       hashMap.put("¨¨", "&Egrave;");
       hashMap.put("¨¦", "&Eacute;");
       hashMap.put("¨º", "&Ecirc;");
       hashMap.put("\xcb\x00", "&Euml;");
       hashMap.put("¨¬", "&Igrave;");
       hashMap.put("¨ª", "&Iacute;");
       hashMap.put("\xce\x00", "&Icirc;");
       hashMap.put("\xcf\x00", "&Iuml;");
       hashMap.put("D", "&ETH;");
       hashMap.put("\xd1\x00", "&Ntilde;");
       hashMap.put("¨°", "&Ograve;");
       hashMap.put("¨®", "&Oacute;");
       hashMap.put("\xd4\x00", "&Ocirc;");
       hashMap.put("\xd5\x00", "&Otilde;");
       hashMap.put("\xd6\x00", "&Ouml;");
       hashMap.put("¡Á", "&times;");
       hashMap.put("\xd8\x00", "&Oslash;");
       hashMap.put("¨´", "&Ugrave;");
       hashMap.put("¨²", "&Uacute;");
       hashMap.put("\xdb\x00", "&Ucirc;");
       hashMap.put("¨¹", "&Uuml;");
       hashMap.put("Y", "&Yacute;");
       hashMap.put("T", "&THORN;");
       hashMap.put("\xdf\x00", "&szlig;");
       hashMap.put("¨¤", "&agrave;");
       hashMap.put("¨¢", "&aacute;");
       hashMap.put("a", "&acirc;");
       hashMap.put("\xe3\x00", "&atilde;");
       hashMap.put("\xe4\x00", "&auml;");
       hashMap.put("\xe5\x00", "&aring;");
       hashMap.put("\xe6\x00", "&aelig;");
       hashMap.put("\xe7\x00", "&ccedil;");
       hashMap.put("¨¨", "&egrave;");
       hashMap.put("¨¦", "&eacute;");
       hashMap.put("¨º", "&ecirc;");
       hashMap.put("\xeb\x00", "&euml;");
       hashMap.put("¨¬", "&igrave;");
       hashMap.put("¨ª", "&iacute;");
       hashMap.put("\xee\x00", "&icirc;");
       hashMap.put("\xef\x00", "&iuml;");
       hashMap.put("e", "&eth;");
       hashMap.put("\xf1\x00", "&ntilde;");
       hashMap.put("¨°", "&ograve;");
       hashMap.put("¨®", "&oacute;");
       hashMap.put("\xf4\x00", "&ocirc;");
       hashMap.put("\xf5\x00", "&otilde;");
       hashMap.put("\xf6\x00", "&ouml;");
       hashMap.put("¡Â", "&divide;");
       hashMap.put("\xf8\x00", "&oslash;");
       hashMap.put("¨´", "&ugrave;");
       hashMap.put("¨²", "&uacute;");
       hashMap.put("\xfb\x00", "&ucirc;");
       hashMap.put("¨¹", "&uuml;");
       hashMap.put("y", "&yacute;");
       hashMap.put("t", "&thorn;");
       hashMap.put("\xff\x00", "&yuml;");
       Map map = Collections.unmodifiableMap(hashMap);
       EntityArrays.ISO8859_1_ESCAPE = map;
       EntityArrays.ISO8859_1_UNESCAPE = Collections.unmodifiableMap(EntityArrays.invert(map));
       hashMap = new HashMap();
       hashMap.put("\x01\x02\x00", "&fnof;");
       hashMap.put("¦¡", "&Alpha;");
       hashMap.put("¦¢", "&Beta;");
       hashMap.put("¦£", "&Gamma;");
       hashMap.put("¦¤", "&Delta;");
       hashMap.put("¦¥", "&Epsilon;");
       hashMap.put("¦¦", "&Zeta;");
       hashMap.put("¦§", "&Eta;");
       hashMap.put("¦¨", "&Theta;");
       hashMap.put("¦©", "&Iota;");
       hashMap.put("¦ª", "&Kappa;");
       hashMap.put("¦«", "&Lambda;");
       hashMap.put("¦¬", "&Mu;");
       hashMap.put("¦­", "&Nu;");
       hashMap.put("¦®", "&Xi;");
       hashMap.put("¦¯", "&Omicron;");
       hashMap.put("¦°", "&Pi;");
       hashMap.put("¦±", "&Rho;");
       hashMap.put("¦²", "&Sigma;");
       hashMap.put("¦³", "&Tau;");
       hashMap.put("¦´", "&Upsilon;");
       hashMap.put("¦µ", "&Phi;");
       hashMap.put("¦¶", "&Chi;");
       hashMap.put("¦·", "&Psi;");
       hashMap.put("¦¸", "&Omega;");
       hashMap.put("¦Á", "&alpha;");
       hashMap.put("¦Â", "&beta;");
       hashMap.put("¦Ã", "&gamma;");
       hashMap.put("¦Ä", "&delta;");
       hashMap.put("¦Å", "&epsilon;");
       hashMap.put("¦Æ", "&zeta;");
       hashMap.put("¦Ç", "&eta;");
       hashMap.put("¦È", "&theta;");
       hashMap.put("¦É", "&iota;");
       hashMap.put("¦Ê", "&kappa;");
       hashMap.put("¦Ë", "&lambda;");
       hashMap.put("¦Ì", "&mu;");
       hashMap.put("¦Í", "&nu;");
       hashMap.put("¦Î", "&xi;");
       hashMap.put("¦Ï", "&omicron;");
       hashMap.put("¦Ð", "&pi;");
       hashMap.put("¦Ñ", "&rho;");
       hashMap.put("\x03\x02\x00", "&sigmaf;");
       hashMap.put("¦Ò", "&sigma;");
       hashMap.put("¦Ó", "&tau;");
       hashMap.put("¦Ô", "&upsilon;");
       hashMap.put("¦Õ", "&phi;");
       hashMap.put("¦Ö", "&chi;");
       hashMap.put("¦×", "&psi;");
       hashMap.put("¦Ø", "&omega;");
       hashMap.put("\x03\x02\x00", "&thetasym;");
       hashMap.put("\x03\x02\x00", "&upsih;");
       hashMap.put("\x03\x02\x00", "&piv;");
       hashMap.put("\x20\x02\x00", "&bull;");
       hashMap.put("¡­", "&hellip;");
       hashMap.put("¡ä", "&prime;");
       hashMap.put("¡å", "&Prime;");
       hashMap.put("£þ", "&oline;");
       hashMap.put("\x20\x02\x00", "&frasl;");
       hashMap.put("\x21\x02\x00", "&weierp;");
       hashMap.put("\x21\x02\x00", "&image;");
       hashMap.put("\x21\x02\x00", "&real;");
       hashMap.put("\x21\x02\x00", "&trade;");
       hashMap.put("\x21\x02\x00", "&alefsym;");
       hashMap.put("¡û", "&larr;");
       hashMap.put("¡ü", "&uarr;");
       hashMap.put("¡ú", "&rarr;");
       hashMap.put("¡ý", "&darr;");
       hashMap.put("\x21\x02\x00", "&harr;");
       hashMap.put("\x21\x02\x00", "&crarr;");
       hashMap.put("\x21\x02\x00", "&lArr;");
       hashMap.put("\x21\x02\x00", "&uArr;");
       hashMap.put("\x21\x02\x00", "&rArr;");
       hashMap.put("\x21\x02\x00", "&dArr;");
       hashMap.put("\x21\x02\x00", "&hArr;");
       hashMap.put("\x22\x02\x00", "&forall;");
       hashMap.put("\x22\x02\x00", "&part;");
       hashMap.put("\x22\x02\x00", "&exist;");
       hashMap.put("\x22\x02\x00", "&empty;");
       hashMap.put("\x22\x02\x00", "&nabla;");
       hashMap.put("¡Ê", "&isin;");
       hashMap.put("\x22\x02\x00", "&notin;");
       hashMap.put("\x22\x02\x00", "&ni;");
       hashMap.put("¡Ç", "&prod;");
       hashMap.put("¡Æ", "&sum;");
       hashMap.put("\x22\x02\x00", "&minus;");
       hashMap.put("\x22\x02\x00", "&lowast;");
       hashMap.put("¡Ì", "&radic;");
       hashMap.put("¡Ø", "&prop;");
       hashMap.put("¡Þ", "&infin;");
       hashMap.put("¡Ï", "&ang;");
       hashMap.put("¡Ä", "&and;");
       hashMap.put("¡Å", "&or;");
       hashMap.put("¡É", "&cap;");
       hashMap.put("¡È", "&cup;");
       hashMap.put("¡Ò", "&int;");
       hashMap.put("¡à", "&there4;");
       hashMap.put("¡«", "&sim;");
       hashMap.put("\x22\x02\x00", "&cong;");
       hashMap.put("¡Ö", "&asymp;");
       hashMap.put("¡Ù", "&ne;");
       hashMap.put("¡Ô", "&equiv;");
       hashMap.put("¡Ü", "&le;");
       hashMap.put("¡Ý", "&ge;");
       hashMap.put("\x22\x02\x00", "&sub;");
       hashMap.put("\x22\x02\x00", "&sup;");
       hashMap.put("\x22\x02\x00", "&nsub;");
       hashMap.put("\x22\x02\x00", "&sube;");
       hashMap.put("\x22\x02\x00", "&supe;");
       hashMap.put("¨’", "&oplus;");
       hashMap.put("\x22\x02\x00", "&otimes;");
       hashMap.put("¡Í", "&perp;");
       hashMap.put("\x22\x02\x00", "&sdot;");
       hashMap.put("\x23\x02\x00", "&lceil;");
       hashMap.put("\x23\x02\x00", "&rceil;");
       hashMap.put("\x23\x02\x00", "&lfloor;");
       hashMap.put("\x23\x02\x00", "&rfloor;");
       hashMap.put("\x23\x02\x00", "&lang;");
       hashMap.put("\x23\x02\x00", "&rang;");
       hashMap.put("\x25\x02\x00", "&loz;");
       hashMap.put("\x26\x02\x00", "&spades;");
       hashMap.put("\x26\x02\x00", "&clubs;");
       hashMap.put("\x26\x02\x00", "&hearts;");
       hashMap.put("\x26\x02\x00", "&diams;");
       hashMap.put("\x01\x02\x00", "&OElig;");
       hashMap.put("\x01\x02\x00", "&oelig;");
       hashMap.put("\x01\x02\x00", "&Scaron;");
       hashMap.put("\x01\x02\x00", "&scaron;");
       hashMap.put("\x01\x02\x00", "&Yuml;");
       hashMap.put("\x02\x02\x00", "&circ;");
       hashMap.put("\x02\x02\x00", "&tilde;");
       hashMap.put("\x20\x02\x00", "&ensp;");
       hashMap.put("\x20\x02\x00", "&emsp;");
       hashMap.put("\x20\x02\x00", "&thinsp;");
       hashMap.put("\x20\x02\x00", "&zwnj;");
       hashMap.put("\x20\x02\x00", "&zwj;");
       hashMap.put("\x20\x02\x00", "&lrm;");
       hashMap.put("\x20\x02\x00", "&rlm;");
       hashMap.put("¨C", "&ndash;");
       hashMap.put("¡ª", "&mdash;");
       hashMap.put("¡®", "&lsquo;");
       hashMap.put("¡¯", "&rsquo;");
       hashMap.put("\x20\x02\x00", "&sbquo;");
       hashMap.put("¡°", "&ldquo;");
       hashMap.put("¡±", "&rdquo;");
       hashMap.put("\x20\x02\x00", "&bdquo;");
       hashMap.put("\x20\x02\x00", "&dagger;");
       hashMap.put("\x20\x02\x00", "&Dagger;");
       hashMap.put("¡ë", "&permil;");
       hashMap.put("\x20\x02\x00", "&lsaquo;");
       hashMap.put("\x20\x02\x00", "&rsaquo;");
       hashMap.put("\x80", "&euro;");
       map = Collections.unmodifiableMap(hashMap);
       EntityArrays.HTML40_EXTENDED_ESCAPE = map;
       EntityArrays.HTML40_EXTENDED_UNESCAPE = Collections.unmodifiableMap(EntityArrays.invert(map));
       hashMap = new HashMap();
       hashMap.put("\"", "&quot;");
       hashMap.put("&", "&amp;");
       hashMap.put("<", "&lt;");
       hashMap.put(">", "&gt;");
       map = Collections.unmodifiableMap(hashMap);
       EntityArrays.BASIC_ESCAPE = map;
       EntityArrays.BASIC_UNESCAPE = Collections.unmodifiableMap(EntityArrays.invert(map));
       hashMap = new HashMap();
       hashMap.put("\'", "&apos;");
       map = Collections.unmodifiableMap(hashMap);
       EntityArrays.APOS_ESCAPE = map;
       EntityArrays.APOS_UNESCAPE = Collections.unmodifiableMap(EntityArrays.invert(map));
       hashMap = new HashMap();
       hashMap.put("\b", "\\b");
       hashMap.put("\n", "\\n");
       hashMap.put("\t", "\\t");
       hashMap.put("\f", "\\f");
       hashMap.put("\r", "\\r");
       map = Collections.unmodifiableMap(hashMap);
       EntityArrays.JAVA_CTRL_CHARS_ESCAPE = map;
       EntityArrays.JAVA_CTRL_CHARS_UNESCAPE = Collections.unmodifiableMap(EntityArrays.invert(map));
    }
    public void EntityArrays(){
       super();
    }
    public static Map invert(Map p0){
       HashMap obj = PatchProxy.applyOneRefs(p0, null, EntityArrays.class, "1");
       if (obj != PatchProxyResult.class) {
          return obj;
       }
       obj = new HashMap();
       Iterator iterator = p0.entrySet().iterator();
       while (iterator.hasNext()) {
          Map$Entry uEntry = iterator.next();
          Object value = uEntry.getValue();
          obj.put(value, uEntry.getKey());
       }
       return obj;
    }
}
